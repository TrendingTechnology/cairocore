% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cairo-svg-surface.R
\name{cairo_svg_surface_create}
\alias{cairo_svg_surface_create}
\title{cairo_svg_surface_create}
\usage{
cairo_svg_surface_create(filename, width, height)
}
\arguments{
\item{filename}{[\code{char *}] a filename for the SVG output (must be writable), \%NULL may be used to specify no output. This will generate a SVG surface that may be queried and used as a source, without generating a temporary file.}

\item{width}{[\code{double}] width of the surface, in points (1 point == 1/72.0 inch)}

\item{height}{[\code{double}] height of the surface, in points (1 point == 1/72.0 inch)}
}
\value{
[\code{cairo_surface_t *}]
}
\description{
Creates a SVG surface of the specified size in points to be written
to filename.
}
\details{
The SVG surface backend recognizes the following MIME types for the
data attached to a surface (see cairo_surface_set_mime_data()) when
it is used as a source pattern for drawing on this surface:
\%CAIRO_MIME_TYPE_JPEG, \%CAIRO_MIME_TYPE_PNG,
\%CAIRO_MIME_TYPE_URI. If any of them is specified, the SVG backend
emits a href with the content of MIME data instead of a surface
snapshot (PNG, Base64-encoded) in the corresponding image tag.

The unofficial MIME type \%CAIRO_MIME_TYPE_URI is examined
first. If present, the URI is emitted as is: assuring the
correctness of URI is left to the client code.

If \%CAIRO_MIME_TYPE_URI is not present, but \%CAIRO_MIME_TYPE_JPEG
or \%CAIRO_MIME_TYPE_PNG is specified, the corresponding data is
Base64-encoded and emitted.

If \%CAIRO_MIME_TYPE_UNIQUE_ID is present, all surfaces with the same
unique identifier will only be embedded once.

Return value: a pointer to the newly created surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a "nil" surface if an error such as out of memory
occurs. You can use cairo_surface_status() to check for this.

Since: 1.2

C function prototype: \code{cairo_surface_t * cairo_svg_surface_create (const char *filename, double width, double height)}
}
\seealso{
Other cairo-svg-surface: 
\code{\link{cairo_svg_surface_get_document_unit}()},
\code{\link{cairo_svg_surface_restrict_to_version}()},
\code{\link{cairo_svg_surface_set_document_unit}()},
\code{\link{cairo_svg_version_to_string}()}
}
\concept{cairo-svg-surface}
