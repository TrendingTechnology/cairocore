% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cairo--.R
\name{cairo_arc}
\alias{cairo_arc}
\title{cairo_arc}
\usage{
cairo_arc(cr, xc, yc, radius, angle1, angle2)
}
\arguments{
\item{cr}{[\code{cairo_t *}] a cairo context}

\item{xc}{[\code{double}] X position of the center of the arc}

\item{yc}{[\code{double}] Y position of the center of the arc}

\item{radius}{[\code{double}] the radius of the arc}

\item{angle1}{[\code{double}] the start angle, in radians}

\item{angle2}{[\code{double}] the end angle, in radians}
}
\description{
Adds a circular arc of the given radius to the current path.  The
arc is centered at (xc, yc), begins at angle1 and proceeds in
the direction of increasing angles to end at angle2. If angle2 is
less than angle1 it will be progressively increased by
<literal>2*M_PI</literal> until it is greater than angle1.
}
\details{
If there is a current point, an initial line segment will be added
to the path to connect the current point to the beginning of the
arc. If this initial line is undesired, it can be avoided by
calling cairo_new_sub_path() before calling cairo_arc().

Angles are measured in radians. An angle of 0.0 is in the direction
of the positive X axis (in user space). An angle of
<literal>M_PI/2.0</literal> radians (90 degrees) is in the
direction of the positive Y axis (in user space). Angles increase
in the direction from the positive X axis toward the positive Y
axis. So with the default transformation matrix, angles increase in
a clockwise direction.

(To convert from degrees to radians, use <literal>degrees * (M_PI /
180.)</literal>.)

This function gives the arc in the direction of increasing angles;
see cairo_arc_negative() to get the arc in the direction of
decreasing angles.

The arc is circular in user space. To achieve an elliptical arc,
you can scale the current transformation matrix by different
amounts in the X and Y directions. For example, to draw an ellipse
in the box given by x, y, width, height:

<informalexample><programlisting>
cairo_save (cr);
cairo_translate (cr, x + width / 2., y + height / 2.);
cairo_scale (cr, width / 2., height / 2.);
cairo_arc (cr, 0., 0., 1., 0., 2 * M_PI);
cairo_restore (cr);
</programlisting></informalexample>

Since: 1.0

C function prototype: \code{void cairo_arc (cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2)}
}
\seealso{
Other cairo--: 
\code{\link{cairo_append_path}()},
\code{\link{cairo_arc_negative}()},
\code{\link{cairo_clip_extents}()},
\code{\link{cairo_clip_preserve}()},
\code{\link{cairo_clip}()},
\code{\link{cairo_close_path}()},
\code{\link{cairo_copy_page}()},
\code{\link{cairo_copy_path_flat}()},
\code{\link{cairo_copy_path}()},
\code{\link{cairo_create}()},
\code{\link{cairo_curve_to}()},
\code{\link{cairo_device_to_user_distance}()},
\code{\link{cairo_device_to_user}()},
\code{\link{cairo_fill_extents}()},
\code{\link{cairo_fill_preserve}()},
\code{\link{cairo_fill}()},
\code{\link{cairo_font_extents}()},
\code{\link{cairo_get_antialias}()},
\code{\link{cairo_get_current_point}()},
\code{\link{cairo_get_dash_count}()},
\code{\link{cairo_get_dash}()},
\code{\link{cairo_get_fill_rule}()},
\code{\link{cairo_get_font_face}()},
\code{\link{cairo_get_font_matrix}()},
\code{\link{cairo_get_group_target}()},
\code{\link{cairo_get_line_cap}()},
\code{\link{cairo_get_line_join}()},
\code{\link{cairo_get_line_width}()},
\code{\link{cairo_get_matrix}()},
\code{\link{cairo_get_miter_limit}()},
\code{\link{cairo_get_operator}()},
\code{\link{cairo_get_source}()},
\code{\link{cairo_get_target}()},
\code{\link{cairo_get_tolerance}()},
\code{\link{cairo_has_current_point}()},
\code{\link{cairo_identity_matrix}()},
\code{\link{cairo_in_clip}()},
\code{\link{cairo_in_fill}()},
\code{\link{cairo_in_stroke}()},
\code{\link{cairo_line_to}()},
\code{\link{cairo_mask_surface}()},
\code{\link{cairo_mask}()},
\code{\link{cairo_move_to}()},
\code{\link{cairo_new_path}()},
\code{\link{cairo_new_sub_path}()},
\code{\link{cairo_paint_with_alpha}()},
\code{\link{cairo_paint}()},
\code{\link{cairo_path_extents}()},
\code{\link{cairo_pop_group_to_source}()},
\code{\link{cairo_pop_group}()},
\code{\link{cairo_push_group_with_content}()},
\code{\link{cairo_push_group}()},
\code{\link{cairo_rectangle}()},
\code{\link{cairo_rel_curve_to}()},
\code{\link{cairo_rel_line_to}()},
\code{\link{cairo_rel_move_to}()},
\code{\link{cairo_reset_clip}()},
\code{\link{cairo_restore}()},
\code{\link{cairo_rotate}()},
\code{\link{cairo_save}()},
\code{\link{cairo_scale}()},
\code{\link{cairo_select_font_face}()},
\code{\link{cairo_set_antialias}()},
\code{\link{cairo_set_dash}()},
\code{\link{cairo_set_fill_rule}()},
\code{\link{cairo_set_font_face}()},
\code{\link{cairo_set_font_matrix}()},
\code{\link{cairo_set_font_size}()},
\code{\link{cairo_set_line_cap}()},
\code{\link{cairo_set_line_join}()},
\code{\link{cairo_set_line_width}()},
\code{\link{cairo_set_matrix}()},
\code{\link{cairo_set_miter_limit}()},
\code{\link{cairo_set_operator}()},
\code{\link{cairo_set_source_rgba}()},
\code{\link{cairo_set_source_rgb}()},
\code{\link{cairo_set_source_surface}()},
\code{\link{cairo_set_source}()},
\code{\link{cairo_set_tolerance}()},
\code{\link{cairo_show_page}()},
\code{\link{cairo_show_text}()},
\code{\link{cairo_status}()},
\code{\link{cairo_stroke_extents}()},
\code{\link{cairo_stroke_preserve}()},
\code{\link{cairo_stroke}()},
\code{\link{cairo_tag_begin}()},
\code{\link{cairo_tag_end}()},
\code{\link{cairo_text_extents}()},
\code{\link{cairo_text_path}()},
\code{\link{cairo_transform}()},
\code{\link{cairo_translate}()},
\code{\link{cairo_user_to_device_distance}()},
\code{\link{cairo_user_to_device}()}
}
\concept{cairo--}
