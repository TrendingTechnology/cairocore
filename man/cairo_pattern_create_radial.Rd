% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cairo-pattern.R
\name{cairo_pattern_create_radial}
\alias{cairo_pattern_create_radial}
\title{cairo_pattern_create_radial}
\usage{
cairo_pattern_create_radial(cx0, cy0, radius0, cx1, cy1, radius1)
}
\arguments{
\item{cx0}{[\code{double}] x coordinate for the center of the start circle}

\item{cy0}{[\code{double}] y coordinate for the center of the start circle}

\item{radius0}{[\code{double}] radius of the start circle}

\item{cx1}{[\code{double}] x coordinate for the center of the end circle}

\item{cy1}{[\code{double}] y coordinate for the center of the end circle}

\item{radius1}{[\code{double}] radius of the end circle}
}
\value{
[\code{cairo_pattern_t *}]
}
\description{
Creates a new radial gradient #cairo_pattern_t between the two
circles defined by (cx0, cy0, radius0) and (cx1, cy1, radius1).  Before using the
gradient pattern, a number of color stops should be defined using
cairo_pattern_add_color_stop_rgb() or
cairo_pattern_add_color_stop_rgba().
}
\details{
Note: The coordinates here are in pattern space. For a new pattern,
pattern space is identical to user space, but the relationship
between the spaces can be changed with cairo_pattern_set_matrix().

Return value: the newly created #cairo_pattern_t if successful, or
an error pattern in case of no memory.  The caller owns the
returned object and should call cairo_pattern_destroy() when
finished with it.

This function will always return a valid pointer, but if an error
occurred the pattern status will be set to an error.  To inspect
the status of a pattern use cairo_pattern_status().

Since: 1.0

C function prototype: \code{cairo_pattern_t * cairo_pattern_create_radial (double cx0, double cy0, double radius0, double cx1, double cy1, double radius1)}
}
\seealso{
Other cairo-pattern: 
\code{\link{cairo_mesh_pattern_begin_patch}()},
\code{\link{cairo_mesh_pattern_curve_to}()},
\code{\link{cairo_mesh_pattern_end_patch}()},
\code{\link{cairo_mesh_pattern_get_control_point}()},
\code{\link{cairo_mesh_pattern_get_corner_color_rgba}()},
\code{\link{cairo_mesh_pattern_get_patch_count}()},
\code{\link{cairo_mesh_pattern_get_path}()},
\code{\link{cairo_mesh_pattern_line_to}()},
\code{\link{cairo_mesh_pattern_move_to}()},
\code{\link{cairo_mesh_pattern_set_control_point}()},
\code{\link{cairo_mesh_pattern_set_corner_color_rgba}()},
\code{\link{cairo_mesh_pattern_set_corner_color_rgb}()},
\code{\link{cairo_pattern_add_color_stop_rgba}()},
\code{\link{cairo_pattern_add_color_stop_rgb}()},
\code{\link{cairo_pattern_create_for_surface}()},
\code{\link{cairo_pattern_create_linear}()},
\code{\link{cairo_pattern_create_mesh}()},
\code{\link{cairo_pattern_create_rgba}()},
\code{\link{cairo_pattern_create_rgb}()},
\code{\link{cairo_pattern_get_color_stop_count}()},
\code{\link{cairo_pattern_get_color_stop_rgba}()},
\code{\link{cairo_pattern_get_extend}()},
\code{\link{cairo_pattern_get_filter}()},
\code{\link{cairo_pattern_get_linear_points}()},
\code{\link{cairo_pattern_get_matrix}()},
\code{\link{cairo_pattern_get_radial_circles}()},
\code{\link{cairo_pattern_get_rgba}()},
\code{\link{cairo_pattern_get_type}()},
\code{\link{cairo_pattern_set_extend}()},
\code{\link{cairo_pattern_set_filter}()},
\code{\link{cairo_pattern_set_matrix}()},
\code{\link{cairo_pattern_status}()}
}
\concept{cairo-pattern}
