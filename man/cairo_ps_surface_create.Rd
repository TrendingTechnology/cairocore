% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cairo-ps.R
\name{cairo_ps_surface_create}
\alias{cairo_ps_surface_create}
\title{cairo_ps_surface_create}
\usage{
cairo_ps_surface_create(filename, width_in_points, height_in_points)
}
\arguments{
\item{filename}{[\code{char *}] a filename for the PS output (must be writable), \%NULL may be used to specify no output. This will generate a PS surface that may be queried and used as a source, without generating a temporary file.}

\item{width_in_points}{[\code{double}] width of the surface, in points (1 point == 1/72.0 inch)}

\item{height_in_points}{[\code{double}] height of the surface, in points (1 point == 1/72.0 inch)}
}
\value{
[\code{cairo_surface_t *}]
}
\description{
Creates a PostScript surface of the specified size in points to be
written to filename. See cairo_ps_surface_create_for_stream() for
a more flexible mechanism for handling the PostScript output than
simply writing it to a named file.
}
\details{
Note that the size of individual pages of the PostScript output can
vary. See cairo_ps_surface_set_size().

Return value: a pointer to the newly created surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a "nil" surface if an error such as out of memory
occurs. You can use cairo_surface_status() to check for this.

Since: 1.2

C function prototype: \code{cairo_surface_t * cairo_ps_surface_create (const char *filename, double width_in_points, double height_in_points)}
}
\seealso{
Other cairo-ps: 
\code{\link{cairo_ps_level_to_string}()},
\code{\link{cairo_ps_surface_dsc_begin_page_setup}()},
\code{\link{cairo_ps_surface_dsc_begin_setup}()},
\code{\link{cairo_ps_surface_dsc_comment}()},
\code{\link{cairo_ps_surface_get_eps}()},
\code{\link{cairo_ps_surface_restrict_to_level}()},
\code{\link{cairo_ps_surface_set_eps}()},
\code{\link{cairo_ps_surface_set_size}()}
}
\concept{cairo-ps}
