% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cairo-image-surface.R
\name{cairo_image_surface_create_for_data}
\alias{cairo_image_surface_create_for_data}
\title{cairo_image_surface_create_for_data}
\usage{
cairo_image_surface_create_for_data(data, format, width, height, stride)
}
\arguments{
\item{data}{[\code{unsigned char *}] a pointer to a buffer supplied by the application in which to write contents. This pointer must be suitably aligned for any kind of variable, (for example, a pointer returned by malloc).}

\item{format}{[\code{int}] the format of pixels in the buffer}

\item{width}{[\code{int}] the width of the image to be stored in the buffer}

\item{height}{[\code{int}] the height of the image to be stored in the buffer}

\item{stride}{[\code{int}] the number of bytes between the start of rows in the buffer as allocated. This value should always be computed by cairo_format_stride_for_width() before allocating the data buffer.}
}
\value{
[\code{cairo_surface_t *}]
}
\description{
Creates an image surface for the provided pixel data. The output
buffer must be kept around until the #cairo_surface_t is destroyed
or cairo_surface_finish() is called on the surface.  The initial
contents of data will be used as the initial image contents; you
must explicitly clear the buffer, using, for example,
cairo_rectangle() and cairo_fill() if you want it cleared.
}
\details{
Note that the stride may be larger than
width*bytes_per_pixel to provide proper alignment for each pixel
and row. This alignment is required to allow high-performance rendering
within cairo. The correct way to obtain a legal stride value is to
call cairo_format_stride_for_width() with the desired format and
maximum image width value, and then use the resulting stride value
to allocate the data and to create the image surface. See
cairo_format_stride_for_width() for example code.

Return value: a pointer to the newly created surface. The caller
owns the surface and should call cairo_surface_destroy() when done
with it.

This function always returns a valid pointer, but it will return a
pointer to a "nil" surface in the case of an error such as out of
memory or an invalid stride value. In case of invalid stride value
the error status of the returned surface will be
\%CAIRO_STATUS_INVALID_STRIDE.  You can use
cairo_surface_status() to check for this.

See cairo_surface_set_user_data() for a means of attaching a
destroy-notification fallback to the surface if necessary.

Since: 1.0

C function prototype: \code{cairo_surface_t * cairo_image_surface_create_for_data (unsigned char *data, cairo_format_t format, int width, int height, int stride)}
}
\seealso{
Other cairo-image-surface: 
\code{\link{cairo_format_stride_for_width}()},
\code{\link{cairo_image_surface_create}()},
\code{\link{cairo_image_surface_get_data}()},
\code{\link{cairo_image_surface_get_format}()},
\code{\link{cairo_image_surface_get_height}()},
\code{\link{cairo_image_surface_get_stride}()},
\code{\link{cairo_image_surface_get_width}()}
}
\concept{cairo-image-surface}
